// lobby.js

document.addEventListener('DOMContentLoaded', () => {

    // ==========================================================================
    // SEKCJA 1: POBIERANIE ELEMENT√ìW DOM
    // ==========================================================================

    const listaLobbyKontener = document.getElementById('lista-lobby-kontener'); // Kontener na listƒô wpis√≥w lobby
    const ladowanieInfo = document.getElementById('ladowanie-lobby-info');       // Element pokazujƒÖcy status ≈Çadowania
    const odswiezBtn = document.getElementById('odswiez-btn');                 // Przycisk od≈õwie≈ºania listy

    // Elementy modala do wpisywania has≈Ça
    const modalHaslo = document.getElementById('modal-haslo');           // Panel modala
    const modalBackdrop = document.getElementById('modal-backdrop');       // T≈Ço modala
    const anulujHasloBtn = document.getElementById('anuluj-haslo-btn');    // Przycisk Anuluj w modalu
    const zatwierdzHasloBtn = document.getElementById('zatwierdz-haslo-btn'); // Przycisk Do≈ÇƒÖcz w modalu
    const hasloInput = document.getElementById('haslo-input');           // Pole do wpisania has≈Ça
    const bladHaslaEl = document.getElementById('blad-hasla');           // Element na komunikaty o b≈Çƒôdach has≈Ça

    // Zmienna przechowujƒÖca ID lobby, do kt√≥rego u≈ºytkownik pr√≥buje do≈ÇƒÖczyƒá (je≈õli wymaga has≈Ça)
    let lobbyDoDolaczeniaId = null;

    // ==========================================================================
    // SEKCJA 2: G≈Å√ìWNA FUNKCJA - POBIERANIE I RENDEROWANIE LISTY LOBBY
    // ==========================================================================

    /**
     * Asynchronicznie pobiera listƒô dostƒôpnych lobby z serwera (endpoint /gra/lista_lobby)
     * i renderuje jƒÖ w kontenerze #lista-lobby-kontener.
     */
    async function pobierzLobby() {
        // Poka≈º komunikat ≈Çadowania i wyczy≈õƒá poprzedniƒÖ listƒô
        ladowanieInfo.textContent = '≈Åadowanie listy lobby...';
        ladowanieInfo.classList.remove('hidden');
        listaLobbyKontener.innerHTML = ''; // Wyczy≈õƒá stare wpisy
        listaLobbyKontener.appendChild(ladowanieInfo); // Dodaj ponownie komunikat ≈Çadowania

        try {
            // Wykonaj ≈ºƒÖdanie do API serwera
            const response = await fetch('/gra/lista_lobby');
            if (!response.ok) {
                // Rzuƒá b≈ÇƒÖd, je≈õli odpowied≈∫ serwera nie jest OK (np. 404, 500)
                throw new Error(`B≈ÇƒÖd serwera (${response.status}) przy pobieraniu lobby`);
            }

            // Sparsuj odpowied≈∫ JSON
            const data = await response.json();

            // Ukryj komunikat ≈Çadowania i wyczy≈õƒá kontener (ponownie, dla pewno≈õci)
            ladowanieInfo.classList.add('hidden');
            listaLobbyKontener.innerHTML = '';
            // Usuniƒôto log odebranych danych (ju≈º niepotrzebny)
            // console.log("Odebrano z /gra/lista_lobby:", data.lobby_list);

            // Sprawd≈∫, czy lista lobby nie jest pusta
            if (data.lobby_list && data.lobby_list.length > 0) {
                // Przetw√≥rz i wyrenderuj ka≈ºdy wpis lobby
                data.lobby_list.forEach(lobby => {
                    const wpis = document.createElement('div'); // Stw√≥rz div dla wiersza
                    wpis.className = 'wpis-lobby'; // Dodaj klasƒô CSS

                    // --- Formatowanie danych lobby ---
                    const trybGryText = lobby.tryb_gry === '4p' ? '4-osobowy (2v2)' : '3-osobowy (FFA)';
                    const graczeText = `${lobby.aktualni_gracze} / ${lobby.max_gracze}`;
                    const hasloText = lobby.ma_haslo ? 'Tak üîí' : 'Nie';
                    const rankingText = lobby.rankingowa ? 'Tak üèÜ' : 'Nie';
                    // Wy≈õwietl ≈õrednie Elo tylko dla gier rankingowych
                    const eloText = lobby.rankingowa
                        ? (lobby.srednie_elo ? Math.round(lobby.srednie_elo) : 'Brak') // Poka≈º Elo lub 'Brak'
                        : '-'; // Poka≈º '-' dla gier nierankingowych

                    // --- Ustalanie statusu i przycisku akcji ---
                    let statusText = '';
                    let przyciskText = 'Do≈ÇƒÖcz';
                    let czyMoznaDolaczyc = true;

                    // Pobierz nazwƒô aktualnego gracza z localStorage
                    const mojGracz = localStorage.getItem('nazwaGracza');
                    // Sprawd≈∫, czy aktualny gracz jest ju≈º w tym lobby/grze
                    const jestemWGrze = lobby.gracze.includes(mojGracz);

                    if (lobby.status === 'W_TRAKCIE') { // Gra jest w toku
                        if (jestemWGrze) { // Je≈õli gracz by≈Ç w tej grze i siƒô roz≈ÇƒÖczy≈Ç
                            statusText = '<strong style="color: #ffc107;">Roz≈ÇƒÖczono</strong>';
                            przyciskText = 'Do≈ÇƒÖcz Ponownie';
                            czyMoznaDolaczyc = true; // Mo≈ºe wr√≥ciƒá
                        } else { // Je≈õli gracz nie by≈Ç w tej grze
                            statusText = '<strong style="color: #ffc107;">W Trakcie</strong>';
                            przyciskText = 'Obserwuj'; // TODO: Implementacja obserwowania?
                            czyMoznaDolaczyc = false; // Nie mo≈ºna do≈ÇƒÖczyƒá do trwajƒÖcej gry
                        }
                    } else if (lobby.aktualni_gracze >= lobby.max_gracze) { // Lobby jest pe≈Çne
                        statusText = '<strong style="color: #dc3545;">Pe≈Çne</strong>';
                        przyciskText = 'Pe≈Çne';
                        czyMoznaDolaczyc = false; // Nie mo≈ºna do≈ÇƒÖczyƒá
                    } else { // Lobby jest otwarte
                        statusText = '<strong style="color: #28a745;">Otwarte</strong>';
                        przyciskText = 'Do≈ÇƒÖcz';
                        czyMoznaDolaczyc = true; // Mo≈ºna do≈ÇƒÖczyƒá
                    }

                    // --- Tworzenie przycisku Do≈ÇƒÖcz/Obserwuj/Pe≈Çne ---
                    const dolaczBtn = document.createElement('button');
                    dolaczBtn.textContent = przyciskText;
                    dolaczBtn.disabled = !czyMoznaDolaczyc; // Wy≈ÇƒÖcz przycisk, je≈õli nie mo≈ºna do≈ÇƒÖczyƒá
                    if (czyMoznaDolaczyc) {
                        // Przypisz akcjƒô do przycisku
                        dolaczBtn.onclick = () => {
                            obsluzDolaczenie(lobby.id_gry, lobby.ma_haslo);
                        };
                    }

                    // --- Wype≈Çnienie wiersza danymi ---
                    wpis.innerHTML = `
                        <div>${lobby.host}</div>
                        <div>${trybGryText}</div>
                        <div>${graczeText}</div>
                        <div>${hasloText}</div>
                        <div>${rankingText}</div>
                        <div>${eloText}</div>
                        <div>${statusText}</div>
                        <div></div> `;
                    // Dodaj przycisk do ostatniej kom√≥rki wiersza
                    wpis.lastElementChild.appendChild(dolaczBtn);

                    // Dodaj gotowy wiersz do kontenera listy
                    listaLobbyKontener.appendChild(wpis);
                });
            } else {
                // Je≈õli lista lobby jest pusta, poka≈º odpowiedni komunikat
                ladowanieInfo.textContent = 'Nie znaleziono ≈ºadnych publicznych lobby.';
                ladowanieInfo.classList.remove('hidden');
                listaLobbyKontener.appendChild(ladowanieInfo); // Dodaj komunikat do pustego kontenera
            }
        } catch (error) {
            // Obs≈Çuga b≈Çƒôd√≥w sieciowych lub b≈Çƒôd√≥w serwera
            console.error('B≈ÇƒÖd pobierania lobby:', error);
            ladowanieInfo.textContent = 'Nie mo≈ºna za≈Çadowaƒá lobby. Spr√≥buj ponownie.';
            ladowanieInfo.classList.remove('hidden');
            listaLobbyKontener.appendChild(ladowanieInfo); // Poka≈º b≈ÇƒÖd w kontenerze
        }
    }

    // ==========================================================================
    // SEKCJA 3: OBS≈ÅUGA DO≈ÅƒÑCZANIA DO LOBBY
    // ==========================================================================

    /**
     * Obs≈Çuguje klikniƒôcie przycisku "Do≈ÇƒÖcz" / "Do≈ÇƒÖcz Ponownie".
     * Sprawdza, czy lobby wymaga has≈Ça i odpowiednio reaguje.
     * @param {string} idGry - ID gry, do kt√≥rej u≈ºytkownik chce do≈ÇƒÖczyƒá.
     * @param {boolean} maHaslo - Czy lobby jest chronione has≈Çem.
     */
    function obsluzDolaczenie(idGry, maHaslo) {
        // Sprawd≈∫, czy nazwa gracza jest ustawiona
        const nazwaGracza = localStorage.getItem('nazwaGracza');
        if (!nazwaGracza) {
            alert("Nie ustawiono nazwy gracza. Wr√≥ƒá do menu g≈Ç√≥wnego.");
            window.location.href = '/'; // Przekieruj do menu
            return;
        }

        if (maHaslo) { // Je≈õli lobby wymaga has≈Ça
            // Zapisz ID gry i poka≈º modal do wpisania has≈Ça
            lobbyDoDolaczeniaId = idGry;
            hasloInput.value = ''; // Wyczy≈õƒá pole has≈Ça
            bladHaslaEl.classList.add('hidden'); // Ukryj ewentualne b≈Çƒôdy
            modalHaslo.classList.remove('hidden'); // Poka≈º modal
            modalBackdrop.classList.remove('hidden'); // Poka≈º t≈Ço
        } else { // Je≈õli lobby jest publiczne
            // Wyczy≈õƒá ewentualne zapisane has≈Ço i przejd≈∫ do gry
            localStorage.removeItem('lobbyHaslo');
            przejdzDoGry(idGry);
        }
    }

    /**
     * Przekierowuje u≈ºytkownika do strony gry z podanym ID.
     * @param {string} idGry - ID gry.
     */
    function przejdzDoGry(idGry) {
        window.location.href = `/gra.html?id=${idGry}`;
    }

    // ==========================================================================
    // SEKCJA 4: OBS≈ÅUGA MODALA HAS≈ÅA
    // ==========================================================================

    /** Ukrywa modal wpisywania has≈Ça i resetuje stan. */
    function ukryjModalHasla() {
        modalHaslo.classList.add('hidden');
        modalBackdrop.classList.add('hidden');
        lobbyDoDolaczeniaId = null; // Zresetuj ID lobby
    }

    // Przypisanie akcji do przycisku Anuluj
    if (anulujHasloBtn) anulujHasloBtn.onclick = ukryjModalHasla;

    // Przypisanie akcji do t≈Ça modala (zamykanie po klikniƒôciu poza panelem)
    if (modalBackdrop) {
        modalBackdrop.onclick = (e) => {
            // Zamknij modal has≈Ça tylko je≈õli jest widoczny i klikniƒôto t≈Ço
            if (e.target === modalBackdrop && !modalHaslo.classList.contains('hidden')) {
                ukryjModalHasla();
            }
        };
    }

    // Przypisanie akcji do przycisku Zatwierd≈∫/Do≈ÇƒÖcz w modalu has≈Ça
    if (zatwierdzHasloBtn) {
        zatwierdzHasloBtn.onclick = async () => {
            const idGry = lobbyDoDolaczeniaId;
            const haslo = hasloInput.value;
            if (!idGry) return; // Zabezpieczenie

            // Zapisz wpisane has≈Ço w localStorage (WebSocket u≈ºyje go do po≈ÇƒÖczenia)
            localStorage.setItem('lobbyHaslo', haslo);
            // Przejd≈∫ do gry (WebSocket sprawdzi has≈Ço przy po≈ÇƒÖczeniu)
            przejdzDoGry(idGry);
            // Ukryj modal
            ukryjModalHasla();
            // TODO: Rozwa≈ºyƒá sprawdzenie has≈Ça przez API HTTP *przed* przej≈õciem do gry,
            // aby daƒá natychmiastowƒÖ informacjƒô zwrotnƒÖ o b≈Çƒôdnym ha≈õle.
        };
    }
    // Obs≈Çuga Enter w polu has≈Ça
     if (hasloInput) {
         hasloInput.addEventListener('keydown', (e) => {
             if (e.key === 'Enter' && !modalHaslo.classList.contains('hidden')) {
                 zatwierdzHasloBtn.click(); // Symuluj klikniƒôcie przycisku Do≈ÇƒÖcz
             }
         });
     }

    // ==========================================================================
    // SEKCJA 5: INICJALIZACJA I OBS≈ÅUGA OD≈öWIE≈ªANIA
    // ==========================================================================

    // Przypisanie akcji do przycisku Od≈õwie≈º
    if (odswiezBtn) odswiezBtn.onclick = pobierzLobby;

    // Pobierz listƒô lobby przy pierwszym za≈Çadowaniu strony
    pobierzLobby();

}); // Koniec DOMContentLoaded